
stacks:
- current
- instruction
- evaluation

([{< push-i

) pop-i
    if = ( then 1 push-e 
    else pop-e dup push-c push-e

] pop-i
    if = [ then depth-c push-e
    else pop-e negate push-e

} pop-i
    if = { then 

effects: (program current noncurrent eval -- program current noncurrent eval)
    program: [char]
    current: [int]
    noncurrent: [int]
    eval: [int]

run
    "()"rest state -> run rest (push-1-to-e state)
    "[]"rest state -> run rest (push-depth-c-to-e state)
    "{}"rest state -> run rest (pop-c-to-e state)
    "<>"rest state -> run rest (swap-c-and-u state)
    "("rest state -> run (after-match ")" rest) (dup-e-to-c (run (before-match ")" rest) state))
    "["rest state -> run (after-match "]" rest) (neg-e (run (before-match "]" rest) state))
    "{"rest state -> run (after-match "}" rest) (repeat-while (\state -> get-c state == 0) (\state -> run (before-match "}" rest) state) state)


() state -> pure 1
[] state -> pure (length state.current)
{} state -> pop-current (\x -> )
<> state -> flip-current 0

data T = P | B | C | A
data X = X T [X]

parse :: [Char] -> X
parse c:rest = 
    case c of
        '(' -> parse-until ')' 

S := (S) | [S] | {S} | <S> | S S | e

