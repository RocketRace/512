// == Notation ==
// RULE -- a rule that can be parsed by a FSM
// rule! - a rule that requires a stack and alters it across subrule boundaries
// rule -- a rule that requires a stack but does not alter it across subrule boundaries

json = BOM? WS* value WS*

BOM = xef xbb xbf
WS = x09 | x0a | x0d | x20

value = NULL | TRUE | FALSE | NUMBER | STRING | list! | object!

NULL = x6e x75 x6c x6c
TRUE = x74 x72 x74 x65
FALSE = x66 x61 x6c x73 x65

NUMBER = int dec? exp?
int    = x30 | [x31-x39] [x30-x39]*
dec    = x2e [x30-x39]+
exp    = (x65 | x45) (x2b | x2d)? [x30-x39]+

STRING      = x22 char* x22
char        = no_esc | simple_esc | unicode_esc
no_esc      = [x20-x21 x23-x5b x5d-x7f ] | non_ascii
non_ascii   = two_byte | three_byte | four_byte
two_byte    = [xc2-xdf] [x80-xbf]
three_byte  = [xe1-xef] [x80-xbf] {2} | xe0 [xa0-xbf] [x80-xbf]
four_byte   = [xf1-xf3] [x80-xbf] {3} | xf0 [x90-xbf] [x80-xbf] {2} | xf4 [x80-x8f] [x80-xbf] {2}
simple_esc  = x5c [ x22 x2f x5c x62 x66 x6e x72 x74 ]
unicode_esc = x5c x75 [x30-x39 x61-x66 x41-x46] {4}

/* recursive rules require a push-down automaton parser */
/* however, as json has no ambiguities it can be parsed */
/* in linear time by a deterministic pushdown automaton */

list! = x5b WS* values WS* x5d
values = value (WS* x2c WS* value)*

object! = x7b WS* pairs WS* x7d
pairs = pair (WS* x2c WS* pair)*
pair = STRING WS* x3a WS* value

// == PDA ==
// Q: Finite set of states
// S: Finite set of input symbols
// G: Finite set of stack symbols
// q0: Starting state
// Z: Starting stack symbol
// A: Finite set of accepting states
// d: Transition function mapping Q x S u {e} x G to Q x G*, where 
//    an element (p, a, x, q, y) represents a transition from state p 
//    given input symbol a and topmost stack symbol x to state q, 
//    popping the topmost stack element and pushing the sequence y
//    of zero or more stack symbols to the stack
// Considered deterministic if:
// - For any (q, a, x), d(q, a, x) has 0 or 1 elements
// - i.e. given any input permutation, the outcome is either to 
//   halt (accept / reject) or to choose the only other method forward
// - For any (q, x), if d(q, e, x) is nonempty, d(q, a, x) is nonempty for all a 
// - i.e. if the parser accepts an empty input anywhere, it must 
//   also accept any symbol at that point
